//README: Most of the code in this file was automatically generated by the
//express-generator package.  Express Generator also created the bin, public,
//routes, and views folders.
//I'll mark the lines I've added with a border like this ---------

var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

//STEP 2: If we have more than a couple routes, it's good to write them
//in separate files.
//These variables tell Express where those files are.
var index = require('./routes/index');
var users = require('./routes/users');
//--------------My code---------
var hardCoded = require('./routes/hardCoded')
var dbaccess = require('./routes/dbaccess')
//------------------------------

var app = express();

// SETUP: These lines tell express we're using pug, and to look in the views
// directory for our pug files.
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// STEP 2: These calls to the use() function tell our program to
// look at the paths defined above when it receives a certain url.
// We can use this to create a "prefix" for our routes.  See ./routes/hardCoded for more info.
app.use('/', index);
app.use('/users', users);
//------------My Code---------------
// STEP 1: These two functions are examples of Routes written in our main server file.
app.get('/example1', (request, response, next) => {
  response.render('YAY')
})

app.get('/example2', (request, response, next ) => {
  response.render('index', {title: "This Route Exists in app.js"})
})

//STEP 2: These two function calls tell Express to look in other files for our routes.
app.use('/hardCoded', hardCoded);
app.use('/dbaccess', dbaccess);
//-----------------------------------

// If we ask Express for a route not mentioned above,
// This statement defaults to 404.
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
